<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="822" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="805.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="805.00"> </text><svg id="frames" x="10" width="1180"><g><title>[anon] (4 samples, 0.15%)</title><rect x="0.0773%" y="741" width="0.1546%" height="15" fill="rgb(227,0,7)"/><text x="0.3273%" y="751.50"></text></g><g><title>start_thread (3 samples, 0.12%)</title><rect x="0.1160%" y="725" width="0.1160%" height="15" fill="rgb(217,0,24)"/><text x="0.3660%" y="735.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (8 samples, 0.31%)</title><rect x="0.3092%" y="645" width="0.3092%" height="15" fill="rgb(221,193,54)"/><text x="0.5592%" y="655.50"></text></g><g><title>std::process::Command::status::_{{closure}} (8 samples, 0.31%)</title><rect x="0.3092%" y="629" width="0.3092%" height="15" fill="rgb(248,212,6)"/><text x="0.5592%" y="639.50"></text></g><g><title>std::process::Child::wait (8 samples, 0.31%)</title><rect x="0.3092%" y="613" width="0.3092%" height="15" fill="rgb(208,68,35)"/><text x="0.5592%" y="623.50"></text></g><g><title>std::sys::unix::process::process_inner::Process::wait (8 samples, 0.31%)</title><rect x="0.3092%" y="597" width="0.3092%" height="15" fill="rgb(232,128,0)"/><text x="0.5592%" y="607.50"></text></g><g><title>std::sys::unix::cvt_r (8 samples, 0.31%)</title><rect x="0.3092%" y="581" width="0.3092%" height="15" fill="rgb(207,160,47)"/><text x="0.5592%" y="591.50"></text></g><g><title>std::sys::unix::process::process_inner::Process::wait::_{{closure}} (8 samples, 0.31%)</title><rect x="0.3092%" y="565" width="0.3092%" height="15" fill="rgb(228,23,34)"/><text x="0.5592%" y="575.50"></text></g><g><title>__waitpid (8 samples, 0.31%)</title><rect x="0.3092%" y="549" width="0.3092%" height="15" fill="rgb(218,30,26)"/><text x="0.5592%" y="559.50"></text></g><g><title>cargo::commands::test::exec (109 samples, 4.21%)</title><rect x="0.2319%" y="725" width="4.2134%" height="15" fill="rgb(220,122,19)"/><text x="0.4819%" y="735.50">cargo..</text></g><g><title>cargo::ops::cargo_test::run_tests (109 samples, 4.21%)</title><rect x="0.2319%" y="709" width="4.2134%" height="15" fill="rgb(250,228,42)"/><text x="0.4819%" y="719.50">cargo..</text></g><g><title>cargo::ops::cargo_test::run_unit_tests (109 samples, 4.21%)</title><rect x="0.2319%" y="693" width="4.2134%" height="15" fill="rgb(240,193,28)"/><text x="0.4819%" y="703.50">cargo..</text></g><g><title>cargo::util::process_builder::ProcessBuilder::exec (108 samples, 4.17%)</title><rect x="0.2706%" y="677" width="4.1747%" height="15" fill="rgb(216,20,37)"/><text x="0.5206%" y="687.50">cargo..</text></g><g><title>std::process::Command::status (107 samples, 4.14%)</title><rect x="0.3092%" y="661" width="4.1361%" height="15" fill="rgb(206,188,39)"/><text x="0.5592%" y="671.50">std::..</text></g><g><title>std::sys::unix::process::process_inner::&lt;impl std::sys::unix::process::process_common::Command&gt;::spawn (99 samples, 3.83%)</title><rect x="0.6185%" y="645" width="3.8268%" height="15" fill="rgb(217,207,13)"/><text x="0.8685%" y="655.50">std:..</text></g><g><title>__GI___fork (99 samples, 3.83%)</title><rect x="0.6185%" y="629" width="3.8268%" height="15" fill="rgb(231,73,38)"/><text x="0.8685%" y="639.50">__GI..</text></g><g><title>cargo::ops::cargo_compile::compile_ws (4 samples, 0.15%)</title><rect x="4.4840%" y="725" width="0.1546%" height="15" fill="rgb(225,20,46)"/><text x="4.7340%" y="735.50"></text></g><g><title>cargo::core::compiler::context::Context::compile (4 samples, 0.15%)</title><rect x="4.4840%" y="709" width="0.1546%" height="15" fill="rgb(210,31,41)"/><text x="4.7340%" y="719.50"></text></g><g><title>[unknown] (117 samples, 4.52%)</title><rect x="0.2319%" y="741" width="4.5226%" height="15" fill="rgb(221,200,47)"/><text x="0.4819%" y="751.50">[unkn..</text></g><g><title>__libc_thread_freeres (5 samples, 0.19%)</title><rect x="80.4020%" y="709" width="0.1933%" height="15" fill="rgb(226,26,5)"/><text x="80.6520%" y="719.50"></text></g><g><title>arena_thread_freeres (5 samples, 0.19%)</title><rect x="80.4020%" y="693" width="0.1933%" height="15" fill="rgb(249,33,26)"/><text x="80.6520%" y="703.50"></text></g><g><title>_int_free (4 samples, 0.15%)</title><rect x="80.4407%" y="677" width="0.1546%" height="15" fill="rgb(235,183,28)"/><text x="80.6907%" y="687.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (5 samples, 0.19%)</title><rect x="80.6726%" y="613" width="0.1933%" height="15" fill="rgb(221,5,38)"/><text x="80.9226%" y="623.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (4 samples, 0.15%)</title><rect x="80.7112%" y="597" width="0.1546%" height="15" fill="rgb(247,18,42)"/><text x="80.9612%" y="607.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (4 samples, 0.15%)</title><rect x="80.7112%" y="581" width="0.1546%" height="15" fill="rgb(241,131,45)"/><text x="80.9612%" y="591.50"></text></g><g><title>uw_frame_state_for (3 samples, 0.12%)</title><rect x="80.9432%" y="533" width="0.1160%" height="15" fill="rgb(249,31,29)"/><text x="81.1932%" y="543.50"></text></g><g><title>__GI___clone (1,975 samples, 76.34%)</title><rect x="4.7545%" y="741" width="76.3433%" height="15" fill="rgb(225,111,53)"/><text x="5.0045%" y="751.50">__GI___clone</text></g><g><title>start_thread (28 samples, 1.08%)</title><rect x="80.0155%" y="725" width="1.0823%" height="15" fill="rgb(238,160,17)"/><text x="80.2655%" y="735.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (13 samples, 0.50%)</title><rect x="80.5953%" y="709" width="0.5025%" height="15" fill="rgb(214,148,48)"/><text x="80.8453%" y="719.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (13 samples, 0.50%)</title><rect x="80.5953%" y="693" width="0.5025%" height="15" fill="rgb(232,36,49)"/><text x="80.8453%" y="703.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (13 samples, 0.50%)</title><rect x="80.5953%" y="677" width="0.5025%" height="15" fill="rgb(209,103,24)"/><text x="80.8453%" y="687.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (13 samples, 0.50%)</title><rect x="80.5953%" y="661" width="0.5025%" height="15" fill="rgb(229,88,8)"/><text x="80.8453%" y="671.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (12 samples, 0.46%)</title><rect x="80.6339%" y="645" width="0.4639%" height="15" fill="rgb(213,181,19)"/><text x="80.8839%" y="655.50"></text></g><g><title>crossbeam_utils::thread::ScopedThreadBuilder::spawn::_{{closure}} (12 samples, 0.46%)</title><rect x="80.6339%" y="629" width="0.4639%" height="15" fill="rgb(254,191,54)"/><text x="80.8839%" y="639.50"></text></g><g><title>std::backtrace::Backtrace::capture (6 samples, 0.23%)</title><rect x="80.8659%" y="613" width="0.2319%" height="15" fill="rgb(241,83,37)"/><text x="81.1159%" y="623.50"></text></g><g><title>std::backtrace::Backtrace::create (6 samples, 0.23%)</title><rect x="80.8659%" y="597" width="0.2319%" height="15" fill="rgb(233,36,39)"/><text x="81.1159%" y="607.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (6 samples, 0.23%)</title><rect x="80.8659%" y="581" width="0.2319%" height="15" fill="rgb(226,3,54)"/><text x="81.1159%" y="591.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (6 samples, 0.23%)</title><rect x="80.8659%" y="565" width="0.2319%" height="15" fill="rgb(245,192,40)"/><text x="81.1159%" y="575.50"></text></g><g><title>_Unwind_Backtrace (6 samples, 0.23%)</title><rect x="80.8659%" y="549" width="0.2319%" height="15" fill="rgb(238,167,29)"/><text x="81.1159%" y="559.50"></text></g><g><title>cargo (2,103 samples, 81.29%)</title><rect x="0.0000%" y="757" width="81.2911%" height="15" fill="rgb(232,182,51)"/><text x="0.2500%" y="767.50">cargo</text></g><g><title>_start (5 samples, 0.19%)</title><rect x="81.0978%" y="741" width="0.1933%" height="15" fill="rgb(231,60,39)"/><text x="81.3478%" y="751.50"></text></g><g><title>core::ribosome: (45 samples, 1.74%)</title><rect x="81.3297%" y="757" width="1.7395%" height="15" fill="rgb(208,69,12)"/><text x="81.5797%" y="767.50"></text></g><g><title>__GI___clone (45 samples, 1.74%)</title><rect x="81.3297%" y="741" width="1.7395%" height="15" fill="rgb(235,93,37)"/><text x="81.5797%" y="751.50"></text></g><g><title>__GI___clone (4 samples, 0.15%)</title><rect x="83.3011%" y="741" width="0.1546%" height="15" fill="rgb(213,116,39)"/><text x="83.5511%" y="751.50"></text></g><g><title>holochain_2020- (6 samples, 0.23%)</title><rect x="83.3011%" y="757" width="0.2319%" height="15" fill="rgb(222,207,29)"/><text x="83.5511%" y="767.50"></text></g><g><title>__pthread_cond_timedwait (3 samples, 0.12%)</title><rect x="84.5381%" y="725" width="0.1160%" height="15" fill="rgb(206,96,30)"/><text x="84.7881%" y="735.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (3 samples, 0.12%)</title><rect x="84.6927%" y="725" width="0.1160%" height="15" fill="rgb(218,138,4)"/><text x="84.9427%" y="735.50"></text></g><g><title>[anon] (34 samples, 1.31%)</title><rect x="84.2675%" y="741" width="1.3143%" height="15" fill="rgb(250,191,14)"/><text x="84.5175%" y="751.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 0.12%)</title><rect x="85.6591%" y="725" width="0.1160%" height="15" fill="rgb(239,60,40)"/><text x="85.9091%" y="735.50"></text></g><g><title>holochain_2020::core::ribosome::wasm_test::pass_validate_test::_{{closure}}::_{{closure}}::_{{closure}} (3 samples, 0.12%)</title><rect x="85.6591%" y="709" width="0.1160%" height="15" fill="rgb(206,27,48)"/><text x="85.9091%" y="719.50"></text></g><g><title>&lt;holochain_2020::fixt::WasmRibosomeFixturator&lt;holochain_2020::fixt::curve::Zomes&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.12%)</title><rect x="85.6591%" y="693" width="0.1160%" height="15" fill="rgb(225,35,8)"/><text x="85.9091%" y="703.50"></text></g><g><title>holochain_2020::core::ribosome::wasm_ribosome::WasmRibosome::module (3 samples, 0.12%)</title><rect x="85.6591%" y="677" width="0.1160%" height="15" fill="rgb(250,213,24)"/><text x="85.9091%" y="687.50"></text></g><g><title>holochain_wasmer_host::instantiate::module (3 samples, 0.12%)</title><rect x="85.6591%" y="661" width="0.1160%" height="15" fill="rgb(247,123,22)"/><text x="85.9091%" y="671.50"></text></g><g><title>wasmer_runtime::compile (3 samples, 0.12%)</title><rect x="85.6591%" y="645" width="0.1160%" height="15" fill="rgb(231,138,38)"/><text x="85.9091%" y="655.50"></text></g><g><title>wasmer_runtime_core::compile_with (3 samples, 0.12%)</title><rect x="85.6591%" y="629" width="0.1160%" height="15" fill="rgb(231,145,46)"/><text x="85.9091%" y="639.50"></text></g><g><title>&lt;wasmer_runtime_core::codegen::StreamingCompiler&lt;MCG,FCG,RM,E,CGEN&gt; as wasmer_runtime_core::backend::Compiler&gt;::compile (3 samples, 0.12%)</title><rect x="85.6591%" y="613" width="0.1160%" height="15" fill="rgb(251,118,11)"/><text x="85.9091%" y="623.50"></text></g><g><title>wasmer_runtime_core::parse::read_module (3 samples, 0.12%)</title><rect x="85.6591%" y="597" width="0.1160%" height="15" fill="rgb(217,147,25)"/><text x="85.9091%" y="607.50"></text></g><g><title>&lt;holochain_2020::fixt::WasmRibosomeFixturator&lt;holochain_2020::fixt::curve::Zomes&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.12%)</title><rect x="85.9683%" y="725" width="0.1160%" height="15" fill="rgb(247,81,37)"/><text x="86.2183%" y="735.50"></text></g><g><title>holochain_2020::core::ribosome::wasm_ribosome::WasmRibosome::module (3 samples, 0.12%)</title><rect x="85.9683%" y="709" width="0.1160%" height="15" fill="rgb(209,12,38)"/><text x="86.2183%" y="719.50"></text></g><g><title>holochain_wasmer_host::instantiate::module (3 samples, 0.12%)</title><rect x="85.9683%" y="693" width="0.1160%" height="15" fill="rgb(227,1,9)"/><text x="86.2183%" y="703.50"></text></g><g><title>wasmer_runtime::compile (3 samples, 0.12%)</title><rect x="85.9683%" y="677" width="0.1160%" height="15" fill="rgb(248,47,43)"/><text x="86.2183%" y="687.50"></text></g><g><title>wasmer_runtime_core::compile_with (3 samples, 0.12%)</title><rect x="85.9683%" y="661" width="0.1160%" height="15" fill="rgb(221,10,30)"/><text x="86.2183%" y="671.50"></text></g><g><title>&lt;wasmer_runtime_core::codegen::StreamingCompiler&lt;MCG,FCG,RM,E,CGEN&gt; as wasmer_runtime_core::backend::Compiler&gt;::compile (3 samples, 0.12%)</title><rect x="85.9683%" y="645" width="0.1160%" height="15" fill="rgb(210,229,1)"/><text x="86.2183%" y="655.50"></text></g><g><title>wasmer_runtime_core::parse::read_module (3 samples, 0.12%)</title><rect x="85.9683%" y="629" width="0.1160%" height="15" fill="rgb(222,148,37)"/><text x="86.2183%" y="639.50"></text></g><g><title>wasmer_runtime_core::codegen::MiddlewareChain::run (3 samples, 0.12%)</title><rect x="85.9683%" y="613" width="0.1160%" height="15" fill="rgb(234,67,33)"/><text x="86.2183%" y="623.50"></text></g><g><title>&lt;wasmer_clif_backend::code::CraneliftFunctionCodeGenerator as wasmer_runtime_core::codegen::FunctionCodeGenerator&lt;wasmer_clif_backend::code::CodegenError&gt;&gt;::feed_event (3 samples, 0.12%)</title><rect x="85.9683%" y="597" width="0.1160%" height="15" fill="rgb(247,98,35)"/><text x="86.2183%" y="607.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (3 samples, 0.12%)</title><rect x="87.0506%" y="469" width="0.1160%" height="15" fill="rgb(247,138,52)"/><text x="87.3006%" y="479.50"></text></g><g><title>&lt;cranelift_codegen::ir::function::Function as core::clone::Clone&gt;::clone (3 samples, 0.12%)</title><rect x="87.0506%" y="453" width="0.1160%" height="15" fill="rgb(213,79,30)"/><text x="87.3006%" y="463.50"></text></g><g><title>cranelift_codegen::legalizer::globalvalue::iadd_imm_addr (3 samples, 0.12%)</title><rect x="87.3212%" y="325" width="0.1160%" height="15" fill="rgb(246,177,23)"/><text x="87.5712%" y="335.50"></text></g><g><title>cranelift_codegen::legalizer::globalvalue::expand_global_value (5 samples, 0.19%)</title><rect x="87.3212%" y="341" width="0.1933%" height="15" fill="rgb(230,62,27)"/><text x="87.5712%" y="351.50"></text></g><g><title>cranelift_codegen::isa::x86::enc_tables::x86_expand (11 samples, 0.43%)</title><rect x="87.2826%" y="389" width="0.4252%" height="15" fill="rgb(216,154,8)"/><text x="87.5326%" y="399.50"></text></g><g><title>cranelift_codegen::legalizer::expand_flags (10 samples, 0.39%)</title><rect x="87.3212%" y="373" width="0.3865%" height="15" fill="rgb(244,35,45)"/><text x="87.5712%" y="383.50"></text></g><g><title>cranelift_codegen::legalizer::expand (10 samples, 0.39%)</title><rect x="87.3212%" y="357" width="0.3865%" height="15" fill="rgb(251,115,12)"/><text x="87.5712%" y="367.50"></text></g><g><title>cranelift_codegen::legalizer::heap::expand_heap_addr (5 samples, 0.19%)</title><rect x="87.5145%" y="341" width="0.1933%" height="15" fill="rgb(240,54,50)"/><text x="87.7645%" y="351.50"></text></g><g><title>cranelift_codegen::legalizer::heap::expand_heap_addr (4 samples, 0.15%)</title><rect x="87.5532%" y="325" width="0.1546%" height="15" fill="rgb(233,84,52)"/><text x="87.8032%" y="335.50"></text></g><g><title>cranelift_codegen::ir::builder::InstBuilder::icmp (4 samples, 0.15%)</title><rect x="87.5532%" y="309" width="0.1546%" height="15" fill="rgb(207,117,47)"/><text x="87.8032%" y="319.50"></text></g><g><title>cranelift_codegen::ir::builder::InstBuilder::IntCompare (4 samples, 0.15%)</title><rect x="87.5532%" y="293" width="0.1546%" height="15" fill="rgb(249,43,39)"/><text x="87.8032%" y="303.50"></text></g><g><title>&lt;cranelift_codegen::ir::builder::InsertBuilder&lt;IIB&gt; as cranelift_codegen::ir::builder::InstBuilderBase&gt;::build (4 samples, 0.15%)</title><rect x="87.5532%" y="277" width="0.1546%" height="15" fill="rgb(209,38,44)"/><text x="87.8032%" y="287.50"></text></g><g><title>&lt;&amp;mut cranelift_codegen::cursor::FuncCursor as cranelift_codegen::ir::builder::InstInserterBase&gt;::insert_built_inst (4 samples, 0.15%)</title><rect x="87.5532%" y="261" width="0.1546%" height="15" fill="rgb(236,212,23)"/><text x="87.8032%" y="271.50"></text></g><g><title>cranelift_codegen::ir::layout::Layout::insert_inst (4 samples, 0.15%)</title><rect x="87.5532%" y="245" width="0.1546%" height="15" fill="rgb(242,79,21)"/><text x="87.8032%" y="255.50"></text></g><g><title>&lt;cranelift_entity::map::SecondaryMap&lt;K,V&gt; as core::ops::index::IndexMut&lt;K&gt;&gt;::index_mut (4 samples, 0.15%)</title><rect x="87.5532%" y="229" width="0.1546%" height="15" fill="rgb(211,96,35)"/><text x="87.8032%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::resize (4 samples, 0.15%)</title><rect x="87.5532%" y="213" width="0.1546%" height="15" fill="rgb(253,215,40)"/><text x="87.8032%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_with (4 samples, 0.15%)</title><rect x="87.5532%" y="197" width="0.1546%" height="15" fill="rgb(211,81,21)"/><text x="87.8032%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.15%)</title><rect x="87.5532%" y="181" width="0.1546%" height="15" fill="rgb(208,190,38)"/><text x="87.8032%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (4 samples, 0.15%)</title><rect x="87.5532%" y="165" width="0.1546%" height="15" fill="rgb(235,213,38)"/><text x="87.8032%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow (4 samples, 0.15%)</title><rect x="87.5532%" y="149" width="0.1546%" height="15" fill="rgb(237,122,38)"/><text x="87.8032%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (4 samples, 0.15%)</title><rect x="87.5532%" y="133" width="0.1546%" height="15" fill="rgb(244,218,35)"/><text x="87.8032%" y="143.50"></text></g><g><title>alloc::alloc::realloc (4 samples, 0.15%)</title><rect x="87.5532%" y="117" width="0.1546%" height="15" fill="rgb(240,68,47)"/><text x="87.8032%" y="127.50"></text></g><g><title>__GI___libc_realloc (4 samples, 0.15%)</title><rect x="87.5532%" y="101" width="0.1546%" height="15" fill="rgb(210,16,53)"/><text x="87.8032%" y="111.50"></text></g><g><title>_int_realloc (4 samples, 0.15%)</title><rect x="87.5532%" y="85" width="0.1546%" height="15" fill="rgb(235,124,12)"/><text x="87.8032%" y="95.50"></text></g><g><title>_int_malloc (4 samples, 0.15%)</title><rect x="87.5532%" y="69" width="0.1546%" height="15" fill="rgb(224,169,11)"/><text x="87.8032%" y="79.50"></text></g><g><title>cranelift_codegen::flowgraph::ControlFlowGraph::recompute_block (5 samples, 0.19%)</title><rect x="87.7078%" y="341" width="0.1933%" height="15" fill="rgb(250,166,2)"/><text x="87.9578%" y="351.50"></text></g><g><title>cranelift_codegen::context::Context::legalize (21 samples, 0.81%)</title><rect x="87.1666%" y="437" width="0.8118%" height="15" fill="rgb(242,216,29)"/><text x="87.4166%" y="447.50"></text></g><g><title>cranelift_codegen::legalizer::legalize_function (21 samples, 0.81%)</title><rect x="87.1666%" y="421" width="0.8118%" height="15" fill="rgb(230,116,27)"/><text x="87.4166%" y="431.50"></text></g><g><title>cranelift_codegen::legalizer::legalize_inst (20 samples, 0.77%)</title><rect x="87.2053%" y="405" width="0.7731%" height="15" fill="rgb(228,99,48)"/><text x="87.4553%" y="415.50"></text></g><g><title>cranelift_codegen::legalizer::expand_flags (7 samples, 0.27%)</title><rect x="87.7078%" y="389" width="0.2706%" height="15" fill="rgb(253,11,6)"/><text x="87.9578%" y="399.50"></text></g><g><title>cranelift_codegen::legalizer::expand (7 samples, 0.27%)</title><rect x="87.7078%" y="373" width="0.2706%" height="15" fill="rgb(247,143,39)"/><text x="87.9578%" y="383.50"></text></g><g><title>cranelift_codegen::legalizer::expand_cond_trap (7 samples, 0.27%)</title><rect x="87.7078%" y="357" width="0.2706%" height="15" fill="rgb(236,97,10)"/><text x="87.9578%" y="367.50"></text></g><g><title>cranelift_codegen::context::Context::licm (3 samples, 0.12%)</title><rect x="87.9784%" y="437" width="0.1160%" height="15" fill="rgb(233,208,19)"/><text x="88.2284%" y="447.50"></text></g><g><title>cranelift_codegen::licm::do_licm (3 samples, 0.12%)</title><rect x="87.9784%" y="421" width="0.1160%" height="15" fill="rgb(216,164,2)"/><text x="88.2284%" y="431.50"></text></g><g><title>cranelift_codegen::regalloc::coloring::Context::visit_block_header (4 samples, 0.15%)</title><rect x="88.4422%" y="357" width="0.1546%" height="15" fill="rgb(220,129,5)"/><text x="88.6922%" y="367.50"></text></g><g><title>cranelift_codegen::regalloc::live_value_tracker::LiveValueTracker::block_top (4 samples, 0.15%)</title><rect x="88.4422%" y="341" width="0.1546%" height="15" fill="rgb(242,17,10)"/><text x="88.6922%" y="351.50"></text></g><g><title>cranelift_codegen::regalloc::coloring::Context::visit_inst (9 samples, 0.35%)</title><rect x="88.5968%" y="357" width="0.3479%" height="15" fill="rgb(242,107,0)"/><text x="88.8468%" y="367.50"></text></g><g><title>cranelift_codegen::regalloc::coloring::Coloring::run (17 samples, 0.66%)</title><rect x="88.3262%" y="405" width="0.6571%" height="15" fill="rgb(251,28,31)"/><text x="88.5762%" y="415.50"></text></g><g><title>cranelift_codegen::regalloc::coloring::Context::run (17 samples, 0.66%)</title><rect x="88.3262%" y="389" width="0.6571%" height="15" fill="rgb(233,223,10)"/><text x="88.5762%" y="399.50"></text></g><g><title>cranelift_codegen::regalloc::coloring::Context::visit_block (17 samples, 0.66%)</title><rect x="88.3262%" y="373" width="0.6571%" height="15" fill="rgb(215,21,27)"/><text x="88.5762%" y="383.50"></text></g><g><title>cranelift_codegen::regalloc::liveness::extend_to_use (7 samples, 0.27%)</title><rect x="88.9834%" y="389" width="0.2706%" height="15" fill="rgb(232,23,21)"/><text x="89.2334%" y="399.50"></text></g><g><title>cranelift_codegen::regalloc::liverange::GenericLiveRange&lt;PO&gt;::extend_in_block (4 samples, 0.15%)</title><rect x="89.0993%" y="373" width="0.1546%" height="15" fill="rgb(244,5,23)"/><text x="89.3493%" y="383.50"></text></g><g><title>cranelift_codegen::regalloc::liveness::Liveness::compute (8 samples, 0.31%)</title><rect x="88.9834%" y="405" width="0.3092%" height="15" fill="rgb(226,81,46)"/><text x="89.2334%" y="415.50"></text></g><g><title>cranelift_codegen::regalloc::reload::Reload::run (6 samples, 0.23%)</title><rect x="89.2926%" y="405" width="0.2319%" height="15" fill="rgb(247,70,30)"/><text x="89.5426%" y="415.50"></text></g><g><title>cranelift_codegen::regalloc::reload::Context::run (6 samples, 0.23%)</title><rect x="89.2926%" y="389" width="0.2319%" height="15" fill="rgb(212,68,19)"/><text x="89.5426%" y="399.50"></text></g><g><title>cranelift_codegen::regalloc::reload::Context::visit_block (6 samples, 0.23%)</title><rect x="89.2926%" y="373" width="0.2319%" height="15" fill="rgb(240,187,13)"/><text x="89.5426%" y="383.50"></text></g><g><title>cranelift_codegen::regalloc::reload::Context::visit_inst (4 samples, 0.15%)</title><rect x="89.3699%" y="357" width="0.1546%" height="15" fill="rgb(223,113,26)"/><text x="89.6199%" y="367.50"></text></g><g><title>cranelift_codegen::regalloc::reload::Context::reload_inst_candidates (4 samples, 0.15%)</title><rect x="89.3699%" y="341" width="0.1546%" height="15" fill="rgb(206,192,2)"/><text x="89.6199%" y="351.50"></text></g><g><title>cranelift_codegen::ir::builder::InstBuilder::fill (4 samples, 0.15%)</title><rect x="89.3699%" y="325" width="0.1546%" height="15" fill="rgb(241,108,4)"/><text x="89.6199%" y="335.50"></text></g><g><title>cranelift_codegen::ir::builder::InstBuilder::Unary (4 samples, 0.15%)</title><rect x="89.3699%" y="309" width="0.1546%" height="15" fill="rgb(247,173,49)"/><text x="89.6199%" y="319.50"></text></g><g><title>&lt;cranelift_codegen::ir::builder::InsertBuilder&lt;IIB&gt; as cranelift_codegen::ir::builder::InstBuilderBase&gt;::build (4 samples, 0.15%)</title><rect x="89.3699%" y="293" width="0.1546%" height="15" fill="rgb(224,114,35)"/><text x="89.6199%" y="303.50"></text></g><g><title>cranelift_codegen::ir::dfg::DataFlowGraph::make_inst (4 samples, 0.15%)</title><rect x="89.3699%" y="277" width="0.1546%" height="15" fill="rgb(245,159,27)"/><text x="89.6199%" y="287.50"></text></g><g><title>cranelift_entity::primary::PrimaryMap&lt;K,V&gt;::push (4 samples, 0.15%)</title><rect x="89.3699%" y="261" width="0.1546%" height="15" fill="rgb(245,172,44)"/><text x="89.6199%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (4 samples, 0.15%)</title><rect x="89.3699%" y="245" width="0.1546%" height="15" fill="rgb(236,23,11)"/><text x="89.6199%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.15%)</title><rect x="89.3699%" y="229" width="0.1546%" height="15" fill="rgb(205,117,38)"/><text x="89.6199%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (4 samples, 0.15%)</title><rect x="89.3699%" y="213" width="0.1546%" height="15" fill="rgb(237,72,25)"/><text x="89.6199%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow (4 samples, 0.15%)</title><rect x="89.3699%" y="197" width="0.1546%" height="15" fill="rgb(244,70,9)"/><text x="89.6199%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (4 samples, 0.15%)</title><rect x="89.3699%" y="181" width="0.1546%" height="15" fill="rgb(217,125,39)"/><text x="89.6199%" y="191.50"></text></g><g><title>alloc::alloc::realloc (4 samples, 0.15%)</title><rect x="89.3699%" y="165" width="0.1546%" height="15" fill="rgb(235,36,10)"/><text x="89.6199%" y="175.50"></text></g><g><title>__GI___libc_realloc (4 samples, 0.15%)</title><rect x="89.3699%" y="149" width="0.1546%" height="15" fill="rgb(251,123,47)"/><text x="89.6199%" y="159.50"></text></g><g><title>_int_realloc (4 samples, 0.15%)</title><rect x="89.3699%" y="133" width="0.1546%" height="15" fill="rgb(221,13,13)"/><text x="89.6199%" y="143.50"></text></g><g><title>_int_malloc (4 samples, 0.15%)</title><rect x="89.3699%" y="117" width="0.1546%" height="15" fill="rgb(238,131,9)"/><text x="89.6199%" y="127.50"></text></g><g><title>cranelift_codegen::regalloc::live_value_tracker::LiveValueTracker::block_top (4 samples, 0.15%)</title><rect x="89.6019%" y="341" width="0.1546%" height="15" fill="rgb(211,50,8)"/><text x="89.8519%" y="351.50"></text></g><g><title>cranelift_codegen::regalloc::spilling::Context::visit_block_header (5 samples, 0.19%)</title><rect x="89.6019%" y="357" width="0.1933%" height="15" fill="rgb(245,182,24)"/><text x="89.8519%" y="367.50"></text></g><g><title>cranelift_codegen::regalloc::live_value_tracker::LiveValueTracker::process_inst (3 samples, 0.12%)</title><rect x="89.8338%" y="341" width="0.1160%" height="15" fill="rgb(242,14,37)"/><text x="90.0838%" y="351.50"></text></g><g><title>cranelift_codegen::context::Context::regalloc (46 samples, 1.78%)</title><rect x="88.2103%" y="437" width="1.7781%" height="15" fill="rgb(246,228,12)"/><text x="88.4603%" y="447.50">c..</text></g><g><title>cranelift_codegen::regalloc::context::Context::run (46 samples, 1.78%)</title><rect x="88.2103%" y="421" width="1.7781%" height="15" fill="rgb(213,55,15)"/><text x="88.4603%" y="431.50">c..</text></g><g><title>cranelift_codegen::regalloc::spilling::Spilling::run (12 samples, 0.46%)</title><rect x="89.5245%" y="405" width="0.4639%" height="15" fill="rgb(209,9,3)"/><text x="89.7745%" y="415.50"></text></g><g><title>cranelift_codegen::regalloc::spilling::Context::run (12 samples, 0.46%)</title><rect x="89.5245%" y="389" width="0.4639%" height="15" fill="rgb(230,59,30)"/><text x="89.7745%" y="399.50"></text></g><g><title>cranelift_codegen::regalloc::spilling::Context::visit_block (12 samples, 0.46%)</title><rect x="89.5245%" y="373" width="0.4639%" height="15" fill="rgb(209,121,21)"/><text x="89.7745%" y="383.50"></text></g><g><title>cranelift_codegen::regalloc::spilling::Context::visit_inst (5 samples, 0.19%)</title><rect x="89.7951%" y="357" width="0.1933%" height="15" fill="rgb(220,109,13)"/><text x="90.0451%" y="367.50"></text></g><g><title>cranelift_codegen::dominator_tree::DominatorTree::compute_domtree (3 samples, 0.12%)</title><rect x="90.2203%" y="373" width="0.1160%" height="15" fill="rgb(232,18,1)"/><text x="90.4703%" y="383.50"></text></g><g><title>cranelift_codegen::dominator_tree::DominatorTree::compute_idom (3 samples, 0.12%)</title><rect x="90.2203%" y="357" width="0.1160%" height="15" fill="rgb(215,41,42)"/><text x="90.4703%" y="367.50"></text></g><g><title>cranelift_codegen::flowgraph::ControlFlowGraph::pred_iter (3 samples, 0.12%)</title><rect x="90.2203%" y="341" width="0.1160%" height="15" fill="rgb(224,123,36)"/><text x="90.4703%" y="351.50"></text></g><g><title>cranelift_codegen::binemit::relaxation::fold_redundant_jumps (6 samples, 0.23%)</title><rect x="90.1430%" y="405" width="0.2319%" height="15" fill="rgb(240,125,3)"/><text x="90.3930%" y="415.50"></text></g><g><title>cranelift_codegen::dominator_tree::DominatorTree::compute (4 samples, 0.15%)</title><rect x="90.2203%" y="389" width="0.1546%" height="15" fill="rgb(205,98,50)"/><text x="90.4703%" y="399.50"></text></g><g><title>cranelift_codegen::context::Context::relax_branches (11 samples, 0.43%)</title><rect x="89.9884%" y="437" width="0.4252%" height="15" fill="rgb(205,185,37)"/><text x="90.2384%" y="447.50"></text></g><g><title>cranelift_codegen::binemit::relaxation::relax_branches (11 samples, 0.43%)</title><rect x="89.9884%" y="421" width="0.4252%" height="15" fill="rgb(238,207,15)"/><text x="90.2384%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.12%)</title><rect x="90.4909%" y="357" width="0.1160%" height="15" fill="rgb(213,199,42)"/><text x="90.7409%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.12%)</title><rect x="90.4909%" y="341" width="0.1160%" height="15" fill="rgb(235,201,11)"/><text x="90.7409%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (3 samples, 0.12%)</title><rect x="90.4909%" y="325" width="0.1160%" height="15" fill="rgb(207,46,11)"/><text x="90.7409%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3 samples, 0.12%)</title><rect x="90.4909%" y="309" width="0.1160%" height="15" fill="rgb(241,35,35)"/><text x="90.7409%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::_{{closure}} (3 samples, 0.12%)</title><rect x="90.4909%" y="293" width="0.1160%" height="15" fill="rgb(243,32,47)"/><text x="90.7409%" y="303.50"></text></g><g><title>core::iter::adapters::filter_fold::_{{closure}} (3 samples, 0.12%)</title><rect x="90.4909%" y="277" width="0.1160%" height="15" fill="rgb(247,202,23)"/><text x="90.7409%" y="287.50"></text></g><g><title>cranelift_codegen::binemit::shrink::shrink_instructions::_{{closure}} (3 samples, 0.12%)</title><rect x="90.4909%" y="261" width="0.1160%" height="15" fill="rgb(219,102,11)"/><text x="90.7409%" y="271.50"></text></g><g><title>cranelift_codegen::isa::constraints::RecipeConstraints::satisfied (3 samples, 0.12%)</title><rect x="90.4909%" y="245" width="0.1160%" height="15" fill="rgb(243,110,44)"/><text x="90.7409%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.12%)</title><rect x="90.6069%" y="341" width="0.1160%" height="15" fill="rgb(222,74,54)"/><text x="90.8569%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (3 samples, 0.12%)</title><rect x="90.6069%" y="325" width="0.1160%" height="15" fill="rgb(216,99,12)"/><text x="90.8569%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by_key (8 samples, 0.31%)</title><rect x="90.4523%" y="405" width="0.3092%" height="15" fill="rgb(226,22,26)"/><text x="90.7023%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (8 samples, 0.31%)</title><rect x="90.4523%" y="389" width="0.3092%" height="15" fill="rgb(217,163,10)"/><text x="90.7023%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold_first (7 samples, 0.27%)</title><rect x="90.4909%" y="373" width="0.2706%" height="15" fill="rgb(213,25,53)"/><text x="90.7409%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.15%)</title><rect x="90.6069%" y="357" width="0.1546%" height="15" fill="rgb(252,105,26)"/><text x="90.8569%" y="367.50"></text></g><g><title>cranelift_codegen::context::Context::shrink_instructions (10 samples, 0.39%)</title><rect x="90.4136%" y="437" width="0.3865%" height="15" fill="rgb(220,39,43)"/><text x="90.6636%" y="447.50"></text></g><g><title>cranelift_codegen::binemit::shrink::shrink_instructions (10 samples, 0.39%)</title><rect x="90.4136%" y="421" width="0.3865%" height="15" fill="rgb(229,68,48)"/><text x="90.6636%" y="431.50"></text></g><g><title>cranelift_codegen::context::Context::simple_gvn (6 samples, 0.23%)</title><rect x="90.8002%" y="437" width="0.2319%" height="15" fill="rgb(252,8,32)"/><text x="91.0502%" y="447.50"></text></g><g><title>cranelift_codegen::simple_gvn::do_simple_gvn (6 samples, 0.23%)</title><rect x="90.8002%" y="421" width="0.2319%" height="15" fill="rgb(223,20,43)"/><text x="91.0502%" y="431.50"></text></g><g><title>cranelift_codegen::scoped_hash_map::ScopedHashMap&lt;K,V&gt;::entry (4 samples, 0.15%)</title><rect x="90.8775%" y="405" width="0.1546%" height="15" fill="rgb(229,81,49)"/><text x="91.1275%" y="415.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (4 samples, 0.15%)</title><rect x="90.8775%" y="389" width="0.1546%" height="15" fill="rgb(236,28,36)"/><text x="91.1275%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry (4 samples, 0.15%)</title><rect x="90.8775%" y="373" width="0.1546%" height="15" fill="rgb(249,185,26)"/><text x="91.1275%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::reserve (4 samples, 0.15%)</title><rect x="90.8775%" y="357" width="0.1546%" height="15" fill="rgb(249,174,33)"/><text x="91.1275%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve (4 samples, 0.15%)</title><rect x="90.8775%" y="341" width="0.1546%" height="15" fill="rgb(233,201,37)"/><text x="91.1275%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (4 samples, 0.15%)</title><rect x="90.8775%" y="325" width="0.1546%" height="15" fill="rgb(221,78,26)"/><text x="91.1275%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::resize (4 samples, 0.15%)</title><rect x="90.8775%" y="309" width="0.1546%" height="15" fill="rgb(250,127,30)"/><text x="91.1275%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::try_with_capacity (4 samples, 0.15%)</title><rect x="90.8775%" y="293" width="0.1546%" height="15" fill="rgb(230,49,44)"/><text x="91.1275%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::new_uninitialized (4 samples, 0.15%)</title><rect x="90.8775%" y="277" width="0.1546%" height="15" fill="rgb(229,67,23)"/><text x="91.1275%" y="287.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.15%)</title><rect x="90.8775%" y="261" width="0.1546%" height="15" fill="rgb(249,83,47)"/><text x="91.1275%" y="271.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.15%)</title><rect x="90.8775%" y="245" width="0.1546%" height="15" fill="rgb(215,43,3)"/><text x="91.1275%" y="255.50"></text></g><g><title>_int_malloc (4 samples, 0.15%)</title><rect x="90.8775%" y="229" width="0.1546%" height="15" fill="rgb(238,154,13)"/><text x="91.1275%" y="239.50"></text></g><g><title>rayon::iter::plumbing::Producer::fold_with (105 samples, 4.06%)</title><rect x="87.0506%" y="725" width="4.0588%" height="15" fill="rgb(219,56,2)"/><text x="87.3006%" y="735.50">rayo..</text></g><g><title>&lt;rayon::iter::map_with::MapWithFolder&lt;C,U,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (105 samples, 4.06%)</title><rect x="87.0506%" y="709" width="4.0588%" height="15" fill="rgb(233,0,4)"/><text x="87.3006%" y="719.50">&lt;ray..</text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (105 samples, 4.06%)</title><rect x="87.0506%" y="693" width="4.0588%" height="15" fill="rgb(235,30,7)"/><text x="87.3006%" y="703.50">&lt;ray..</text></g><g><title>&lt;rayon::iter::while_some::WhileSomeFolder&lt;C&gt; as rayon::iter::plumbing::Folder&lt;core::option::Option&lt;T&gt;&gt;&gt;::consume_iter (105 samples, 4.06%)</title><rect x="87.0506%" y="677" width="4.0588%" height="15" fill="rgb(250,79,13)"/><text x="87.3006%" y="687.50">&lt;ray..</text></g><g><title>&lt;rayon::iter::fold::FoldFolder&lt;C,ID,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (105 samples, 4.06%)</title><rect x="87.0506%" y="661" width="4.0588%" height="15" fill="rgb(211,146,34)"/><text x="87.3006%" y="671.50">&lt;ray..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (105 samples, 4.06%)</title><rect x="87.0506%" y="645" width="4.0588%" height="15" fill="rgb(228,22,38)"/><text x="87.3006%" y="655.50">core..</text></g><g><title>&lt;core::iter::adapters::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (105 samples, 4.06%)</title><rect x="87.0506%" y="629" width="4.0588%" height="15" fill="rgb(235,168,5)"/><text x="87.3006%" y="639.50">&lt;cor..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (105 samples, 4.06%)</title><rect x="87.0506%" y="613" width="4.0588%" height="15" fill="rgb(221,155,16)"/><text x="87.3006%" y="623.50">&lt;cor..</text></g><g><title>&lt;core::iter::adapters::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (105 samples, 4.06%)</title><rect x="87.0506%" y="597" width="4.0588%" height="15" fill="rgb(215,215,53)"/><text x="87.3006%" y="607.50">&lt;cor..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (105 samples, 4.06%)</title><rect x="87.0506%" y="581" width="4.0588%" height="15" fill="rgb(223,4,10)"/><text x="87.3006%" y="591.50">&lt;cor..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (105 samples, 4.06%)</title><rect x="87.0506%" y="565" width="4.0588%" height="15" fill="rgb(234,103,6)"/><text x="87.3006%" y="575.50">&lt;cor..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (105 samples, 4.06%)</title><rect x="87.0506%" y="549" width="4.0588%" height="15" fill="rgb(227,97,0)"/><text x="87.3006%" y="559.50">core..</text></g><g><title>core::iter::adapters::map_try_fold::_{{closure}} (105 samples, 4.06%)</title><rect x="87.0506%" y="533" width="4.0588%" height="15" fill="rgb(234,150,53)"/><text x="87.3006%" y="543.50">core..</text></g><g><title>&lt;rayon::iter::map_with::MapWithFolder&lt;C,U,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter::with::_{{closure}} (105 samples, 4.06%)</title><rect x="87.0506%" y="517" width="4.0588%" height="15" fill="rgb(228,201,54)"/><text x="87.3006%" y="527.50">&lt;ray..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::Fn&lt;A&gt; for &amp;F&gt;::call (105 samples, 4.06%)</title><rect x="87.0506%" y="501" width="4.0588%" height="15" fill="rgb(222,22,37)"/><text x="87.3006%" y="511.50">core..</text></g><g><title>wasmer_clif_backend::resolver::FuncResolverBuilder::new::_{{closure}} (105 samples, 4.06%)</title><rect x="87.0506%" y="485" width="4.0588%" height="15" fill="rgb(237,53,32)"/><text x="87.3006%" y="495.50">wasm..</text></g><g><title>cranelift_codegen::context::Context::compile_and_emit (102 samples, 3.94%)</title><rect x="87.1666%" y="469" width="3.9428%" height="15" fill="rgb(233,25,53)"/><text x="87.4166%" y="479.50">cran..</text></g><g><title>cranelift_codegen::context::Context::compile (102 samples, 3.94%)</title><rect x="87.1666%" y="453" width="3.9428%" height="15" fill="rgb(210,40,34)"/><text x="87.4166%" y="463.50">cran..</text></g><g><title>&lt;rayon::iter::map_with::MapInitConsumer&lt;C,INIT,F&gt; as rayon::iter::plumbing::Consumer&lt;T&gt;&gt;::into_folder (3 samples, 0.12%)</title><rect x="91.1094%" y="709" width="0.1160%" height="15" fill="rgb(241,220,44)"/><text x="91.3594%" y="719.50"></text></g><g><title>wasmer_clif_backend::resolver::FuncResolverBuilder::new::_{{closure}} (3 samples, 0.12%)</title><rect x="91.1094%" y="693" width="0.1160%" height="15" fill="rgb(235,28,35)"/><text x="91.3594%" y="703.50"></text></g><g><title>cranelift_codegen::context::Context::new (3 samples, 0.12%)</title><rect x="91.1094%" y="677" width="0.1160%" height="15" fill="rgb(210,56,17)"/><text x="91.3594%" y="687.50"></text></g><g><title>cranelift_codegen::ir::function::Function::new (3 samples, 0.12%)</title><rect x="91.1094%" y="661" width="0.1160%" height="15" fill="rgb(224,130,29)"/><text x="91.3594%" y="671.50"></text></g><g><title>cranelift_codegen::ir::function::Function::with_name_signature (3 samples, 0.12%)</title><rect x="91.1094%" y="645" width="0.1160%" height="15" fill="rgb(235,212,8)"/><text x="91.3594%" y="655.50"></text></g><g><title>cranelift_codegen::ir::dfg::DataFlowGraph::new (3 samples, 0.12%)</title><rect x="91.1094%" y="629" width="0.1160%" height="15" fill="rgb(223,33,50)"/><text x="91.3594%" y="639.50"></text></g><g><title>cranelift_codegen::context::Context::clear (3 samples, 0.12%)</title><rect x="91.2254%" y="453" width="0.1160%" height="15" fill="rgb(219,149,13)"/><text x="91.4754%" y="463.50"></text></g><g><title>cranelift_codegen::regalloc::branch_splitting::run (3 samples, 0.12%)</title><rect x="91.6119%" y="389" width="0.1160%" height="15" fill="rgb(250,156,29)"/><text x="91.8619%" y="399.50"></text></g><g><title>cranelift_codegen::regalloc::branch_splitting::Context::run (3 samples, 0.12%)</title><rect x="91.6119%" y="373" width="0.1160%" height="15" fill="rgb(216,193,19)"/><text x="91.8619%" y="383.50"></text></g><g><title>cranelift_codegen::regalloc::liveness::Liveness::compute (4 samples, 0.15%)</title><rect x="91.7279%" y="389" width="0.1546%" height="15" fill="rgb(216,135,14)"/><text x="91.9779%" y="399.50"></text></g><g><title>cranelift_codegen::context::Context::regalloc (16 samples, 0.62%)</title><rect x="91.6119%" y="421" width="0.6185%" height="15" fill="rgb(241,47,5)"/><text x="91.8619%" y="431.50"></text></g><g><title>cranelift_codegen::regalloc::context::Context::run (16 samples, 0.62%)</title><rect x="91.6119%" y="405" width="0.6185%" height="15" fill="rgb(233,42,35)"/><text x="91.8619%" y="415.50"></text></g><g><title>cranelift_codegen::regalloc::reload::Reload::run (9 samples, 0.35%)</title><rect x="91.8825%" y="389" width="0.3479%" height="15" fill="rgb(231,13,6)"/><text x="92.1325%" y="399.50"></text></g><g><title>cranelift_codegen::regalloc::reload::Context::run (9 samples, 0.35%)</title><rect x="91.8825%" y="373" width="0.3479%" height="15" fill="rgb(207,181,40)"/><text x="92.1325%" y="383.50"></text></g><g><title>cranelift_codegen::regalloc::reload::Context::visit_block (9 samples, 0.35%)</title><rect x="91.8825%" y="357" width="0.3479%" height="15" fill="rgb(254,173,49)"/><text x="92.1325%" y="367.50"></text></g><g><title>cranelift_codegen::regalloc::reload::Context::visit_inst (6 samples, 0.23%)</title><rect x="91.9985%" y="341" width="0.2319%" height="15" fill="rgb(221,1,38)"/><text x="92.2485%" y="351.50"></text></g><g><title>cranelift_codegen::context::Context::simple_gvn (5 samples, 0.19%)</title><rect x="92.2304%" y="421" width="0.1933%" height="15" fill="rgb(206,124,46)"/><text x="92.4804%" y="431.50"></text></g><g><title>cranelift_codegen::simple_gvn::do_simple_gvn (5 samples, 0.19%)</title><rect x="92.2304%" y="405" width="0.1933%" height="15" fill="rgb(249,21,11)"/><text x="92.4804%" y="415.50"></text></g><g><title>cranelift_codegen::dominator_tree::DominatorTree::compute (5 samples, 0.19%)</title><rect x="92.4237%" y="421" width="0.1933%" height="15" fill="rgb(222,201,40)"/><text x="92.6737%" y="431.50"></text></g><g><title>cranelift_codegen::dominator_tree::DominatorTree::compute_domtree (5 samples, 0.19%)</title><rect x="92.4237%" y="405" width="0.1933%" height="15" fill="rgb(235,61,29)"/><text x="92.6737%" y="415.50"></text></g><g><title>cranelift_codegen::dominator_tree::DominatorTree::compute_idom (5 samples, 0.19%)</title><rect x="92.4237%" y="389" width="0.1933%" height="15" fill="rgb(219,207,3)"/><text x="92.6737%" y="399.50"></text></g><g><title>cranelift_codegen::flowgraph::ControlFlowGraph::pred_iter (4 samples, 0.15%)</title><rect x="92.4623%" y="373" width="0.1546%" height="15" fill="rgb(222,56,46)"/><text x="92.7123%" y="383.50"></text></g><g><title>cranelift_codegen::context::Context::compile (35 samples, 1.35%)</title><rect x="91.3413%" y="437" width="1.3529%" height="15" fill="rgb(239,76,54)"/><text x="91.5913%" y="447.50"></text></g><g><title>rayon::iter::plumbing::Producer::fold_with (44 samples, 1.70%)</title><rect x="91.2254%" y="709" width="1.7008%" height="15" fill="rgb(231,124,27)"/><text x="91.4754%" y="719.50"></text></g><g><title>&lt;rayon::iter::map_with::MapWithFolder&lt;C,U,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (44 samples, 1.70%)</title><rect x="91.2254%" y="693" width="1.7008%" height="15" fill="rgb(249,195,6)"/><text x="91.4754%" y="703.50"></text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (44 samples, 1.70%)</title><rect x="91.2254%" y="677" width="1.7008%" height="15" fill="rgb(237,174,47)"/><text x="91.4754%" y="687.50"></text></g><g><title>&lt;rayon::iter::while_some::WhileSomeFolder&lt;C&gt; as rayon::iter::plumbing::Folder&lt;core::option::Option&lt;T&gt;&gt;&gt;::consume_iter (44 samples, 1.70%)</title><rect x="91.2254%" y="661" width="1.7008%" height="15" fill="rgb(206,201,31)"/><text x="91.4754%" y="671.50"></text></g><g><title>&lt;rayon::iter::fold::FoldFolder&lt;C,ID,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (44 samples, 1.70%)</title><rect x="91.2254%" y="645" width="1.7008%" height="15" fill="rgb(231,57,52)"/><text x="91.4754%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (44 samples, 1.70%)</title><rect x="91.2254%" y="629" width="1.7008%" height="15" fill="rgb(248,177,22)"/><text x="91.4754%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (44 samples, 1.70%)</title><rect x="91.2254%" y="613" width="1.7008%" height="15" fill="rgb(215,211,37)"/><text x="91.4754%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (44 samples, 1.70%)</title><rect x="91.2254%" y="597" width="1.7008%" height="15" fill="rgb(241,128,51)"/><text x="91.4754%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (44 samples, 1.70%)</title><rect x="91.2254%" y="581" width="1.7008%" height="15" fill="rgb(227,165,31)"/><text x="91.4754%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (44 samples, 1.70%)</title><rect x="91.2254%" y="565" width="1.7008%" height="15" fill="rgb(228,167,24)"/><text x="91.4754%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (44 samples, 1.70%)</title><rect x="91.2254%" y="549" width="1.7008%" height="15" fill="rgb(228,143,12)"/><text x="91.4754%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (44 samples, 1.70%)</title><rect x="91.2254%" y="533" width="1.7008%" height="15" fill="rgb(249,149,8)"/><text x="91.4754%" y="543.50"></text></g><g><title>core::iter::adapters::map_try_fold::_{{closure}} (44 samples, 1.70%)</title><rect x="91.2254%" y="517" width="1.7008%" height="15" fill="rgb(243,35,44)"/><text x="91.4754%" y="527.50"></text></g><g><title>&lt;rayon::iter::map_with::MapWithFolder&lt;C,U,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter::with::_{{closure}} (44 samples, 1.70%)</title><rect x="91.2254%" y="501" width="1.7008%" height="15" fill="rgb(246,89,9)"/><text x="91.4754%" y="511.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::Fn&lt;A&gt; for &amp;F&gt;::call (44 samples, 1.70%)</title><rect x="91.2254%" y="485" width="1.7008%" height="15" fill="rgb(233,213,13)"/><text x="91.4754%" y="495.50"></text></g><g><title>wasmer_clif_backend::resolver::FuncResolverBuilder::new::_{{closure}} (44 samples, 1.70%)</title><rect x="91.2254%" y="469" width="1.7008%" height="15" fill="rgb(233,141,41)"/><text x="91.4754%" y="479.50"></text></g><g><title>cranelift_codegen::context::Context::compile_and_emit (41 samples, 1.58%)</title><rect x="91.3413%" y="453" width="1.5848%" height="15" fill="rgb(239,167,4)"/><text x="91.5913%" y="463.50"></text></g><g><title>cranelift_codegen::context::Context::emit_to_memory (6 samples, 0.23%)</title><rect x="92.6942%" y="437" width="0.2319%" height="15" fill="rgb(209,217,16)"/><text x="92.9442%" y="447.50"></text></g><g><title>cranelift_codegen::binemit::emit_function (6 samples, 0.23%)</title><rect x="92.6942%" y="421" width="0.2319%" height="15" fill="rgb(219,88,35)"/><text x="92.9442%" y="431.50"></text></g><g><title>core::ops::function::Fn::call (5 samples, 0.19%)</title><rect x="92.7329%" y="405" width="0.1933%" height="15" fill="rgb(220,193,23)"/><text x="92.9829%" y="415.50"></text></g><g><title>cranelift_codegen::isa::x86::binemit::emit_inst (5 samples, 0.19%)</title><rect x="92.7329%" y="389" width="0.1933%" height="15" fill="rgb(230,90,52)"/><text x="92.9829%" y="399.50"></text></g><g><title>cranelift_codegen::regalloc::diversion::RegDiversions::reg (3 samples, 0.12%)</title><rect x="92.8102%" y="373" width="0.1160%" height="15" fill="rgb(252,106,19)"/><text x="93.0602%" y="383.50"></text></g><g><title>cranelift_codegen::regalloc::diversion::RegDiversions::get (3 samples, 0.12%)</title><rect x="92.8102%" y="357" width="0.1160%" height="15" fill="rgb(206,74,20)"/><text x="93.0602%" y="367.50"></text></g><g><title>__rust_probestack (4 samples, 0.15%)</title><rect x="93.9312%" y="533" width="0.1546%" height="15" fill="rgb(230,138,44)"/><text x="94.1812%" y="543.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (81 samples, 3.13%)</title><rect x="91.1094%" y="725" width="3.1310%" height="15" fill="rgb(235,182,43)"/><text x="91.3594%" y="735.50">ray..</text></g><g><title>rayon_core::join::join_context (34 samples, 1.31%)</title><rect x="92.9262%" y="709" width="1.3143%" height="15" fill="rgb(242,16,51)"/><text x="93.1762%" y="719.50"></text></g><g><title>rayon_core::registry::in_worker (34 samples, 1.31%)</title><rect x="92.9262%" y="693" width="1.3143%" height="15" fill="rgb(248,9,4)"/><text x="93.1762%" y="703.50"></text></g><g><title>rayon_core::join::join_context::_{{closure}} (34 samples, 1.31%)</title><rect x="92.9262%" y="677" width="1.3143%" height="15" fill="rgb(210,31,22)"/><text x="93.1762%" y="687.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (32 samples, 1.24%)</title><rect x="93.0035%" y="661" width="1.2370%" height="15" fill="rgb(239,54,39)"/><text x="93.2535%" y="671.50"></text></g><g><title>std::panic::catch_unwind (32 samples, 1.24%)</title><rect x="93.0035%" y="645" width="1.2370%" height="15" fill="rgb(230,99,41)"/><text x="93.2535%" y="655.50"></text></g><g><title>std::panicking::try (32 samples, 1.24%)</title><rect x="93.0035%" y="629" width="1.2370%" height="15" fill="rgb(253,106,12)"/><text x="93.2535%" y="639.50"></text></g><g><title>std::panicking::try::do_call (32 samples, 1.24%)</title><rect x="93.0035%" y="613" width="1.2370%" height="15" fill="rgb(213,46,41)"/><text x="93.2535%" y="623.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (32 samples, 1.24%)</title><rect x="93.0035%" y="597" width="1.2370%" height="15" fill="rgb(215,133,35)"/><text x="93.2535%" y="607.50"></text></g><g><title>rayon_core::join::join_context::call_a::_{{closure}} (32 samples, 1.24%)</title><rect x="93.0035%" y="581" width="1.2370%" height="15" fill="rgb(213,28,5)"/><text x="93.2535%" y="591.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::_{{closure}} (32 samples, 1.24%)</title><rect x="93.0035%" y="565" width="1.2370%" height="15" fill="rgb(215,77,49)"/><text x="93.2535%" y="575.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (32 samples, 1.24%)</title><rect x="93.0035%" y="549" width="1.2370%" height="15" fill="rgb(248,100,22)"/><text x="93.2535%" y="559.50"></text></g><g><title>rayon_core::join::join_context (4 samples, 0.15%)</title><rect x="94.0858%" y="533" width="0.1546%" height="15" fill="rgb(208,67,9)"/><text x="94.3358%" y="543.50"></text></g><g><title>[unknown] (226 samples, 8.74%)</title><rect x="85.6204%" y="741" width="8.7360%" height="15" fill="rgb(219,133,21)"/><text x="85.8704%" y="751.50">[unknown]</text></g><g><title>core::option::Option&lt;T&gt;::or_else (5 samples, 0.19%)</title><rect x="96.2118%" y="453" width="0.1933%" height="15" fill="rgb(246,46,29)"/><text x="96.4618%" y="463.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold::_{{closure}} (5 samples, 0.19%)</title><rect x="96.2118%" y="437" width="0.1933%" height="15" fill="rgb(246,185,52)"/><text x="96.4618%" y="447.50"></text></g><g><title>rayon_core::registry::WorkerThread::steal (4 samples, 0.15%)</title><rect x="96.2505%" y="421" width="0.1546%" height="15" fill="rgb(252,136,11)"/><text x="96.5005%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.15%)</title><rect x="96.2505%" y="405" width="0.1546%" height="15" fill="rgb(219,138,53)"/><text x="96.5005%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (4 samples, 0.15%)</title><rect x="96.2505%" y="389" width="0.1546%" height="15" fill="rgb(211,51,23)"/><text x="96.5005%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.15%)</title><rect x="96.2505%" y="373" width="0.1546%" height="15" fill="rgb(247,221,28)"/><text x="96.5005%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.15%)</title><rect x="96.2505%" y="357" width="0.1546%" height="15" fill="rgb(251,222,45)"/><text x="96.5005%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (4 samples, 0.15%)</title><rect x="96.2505%" y="341" width="0.1546%" height="15" fill="rgb(217,162,53)"/><text x="96.5005%" y="351.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3 samples, 0.12%)</title><rect x="96.2891%" y="325" width="0.1160%" height="15" fill="rgb(229,93,14)"/><text x="96.5391%" y="335.50"></text></g><g><title>core::iter::adapters::filter_try_fold::_{{closure}} (3 samples, 0.12%)</title><rect x="96.2891%" y="309" width="0.1160%" height="15" fill="rgb(209,67,49)"/><text x="96.5391%" y="319.50"></text></g><g><title>&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::_{{closure}} (33 samples, 1.28%)</title><rect x="96.2118%" y="533" width="1.2756%" height="15" fill="rgb(213,87,29)"/><text x="96.4618%" y="543.50"></text></g><g><title>rayon_core::registry::ThreadBuilder::run (33 samples, 1.28%)</title><rect x="96.2118%" y="517" width="1.2756%" height="15" fill="rgb(205,151,52)"/><text x="96.4618%" y="527.50"></text></g><g><title>rayon_core::registry::main_loop (33 samples, 1.28%)</title><rect x="96.2118%" y="501" width="1.2756%" height="15" fill="rgb(253,215,39)"/><text x="96.4618%" y="511.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until (33 samples, 1.28%)</title><rect x="96.2118%" y="485" width="1.2756%" height="15" fill="rgb(221,220,41)"/><text x="96.4618%" y="495.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (33 samples, 1.28%)</title><rect x="96.2118%" y="469" width="1.2756%" height="15" fill="rgb(218,133,21)"/><text x="96.4618%" y="479.50"></text></g><g><title>rayon_core::sleep::Sleep::no_work_found (28 samples, 1.08%)</title><rect x="96.4051%" y="453" width="1.0823%" height="15" fill="rgb(221,193,43)"/><text x="96.6551%" y="463.50"></text></g><g><title>rayon_core::sleep::Sleep::sleep (28 samples, 1.08%)</title><rect x="96.4051%" y="437" width="1.0823%" height="15" fill="rgb(240,128,52)"/><text x="96.6551%" y="447.50"></text></g><g><title>std::sync::condvar::Condvar::wait (28 samples, 1.08%)</title><rect x="96.4051%" y="421" width="1.0823%" height="15" fill="rgb(253,114,12)"/><text x="96.6551%" y="431.50"></text></g><g><title>__pthread_cond_wait (28 samples, 1.08%)</title><rect x="96.4051%" y="405" width="1.0823%" height="15" fill="rgb(215,223,47)"/><text x="96.6551%" y="415.50"></text></g><g><title>__pthread_mutex_cond_lock (8 samples, 0.31%)</title><rect x="97.1782%" y="389" width="0.3092%" height="15" fill="rgb(248,225,23)"/><text x="97.4282%" y="399.50"></text></g><g><title>__lll_lock_wait (8 samples, 0.31%)</title><rect x="97.1782%" y="373" width="0.3092%" height="15" fill="rgb(250,108,0)"/><text x="97.4282%" y="383.50"></text></g><g><title>std::sync::condvar::Condvar::wait_timeout (17 samples, 0.66%)</title><rect x="97.5261%" y="453" width="0.6571%" height="15" fill="rgb(228,208,7)"/><text x="97.7761%" y="463.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait_timeout (17 samples, 0.66%)</title><rect x="97.5261%" y="437" width="0.6571%" height="15" fill="rgb(244,45,10)"/><text x="97.7761%" y="447.50"></text></g><g><title>std::sys::unix::condvar::Condvar::wait_timeout (17 samples, 0.66%)</title><rect x="97.5261%" y="421" width="0.6571%" height="15" fill="rgb(207,125,25)"/><text x="97.7761%" y="431.50"></text></g><g><title>__pthread_cond_timedwait (17 samples, 0.66%)</title><rect x="97.5261%" y="405" width="0.6571%" height="15" fill="rgb(210,195,18)"/><text x="97.7761%" y="415.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (8 samples, 0.31%)</title><rect x="98.1832%" y="453" width="0.3092%" height="15" fill="rgb(249,80,12)"/><text x="98.4332%" y="463.50"></text></g><g><title>std::sys_common::mutex::Mutex::raw_lock (8 samples, 0.31%)</title><rect x="98.1832%" y="437" width="0.3092%" height="15" fill="rgb(221,65,9)"/><text x="98.4332%" y="447.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (8 samples, 0.31%)</title><rect x="98.1832%" y="421" width="0.3092%" height="15" fill="rgb(235,49,36)"/><text x="98.4332%" y="431.50"></text></g><g><title>__GI___pthread_mutex_lock (8 samples, 0.31%)</title><rect x="98.1832%" y="405" width="0.3092%" height="15" fill="rgb(225,32,20)"/><text x="98.4332%" y="415.50"></text></g><g><title>__lll_lock_wait (8 samples, 0.31%)</title><rect x="98.1832%" y="389" width="0.3092%" height="15" fill="rgb(215,141,46)"/><text x="98.4332%" y="399.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (15 samples, 0.58%)</title><rect x="98.5311%" y="149" width="0.5798%" height="15" fill="rgb(250,160,47)"/><text x="98.7811%" y="159.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (15 samples, 0.58%)</title><rect x="98.5311%" y="133" width="0.5798%" height="15" fill="rgb(216,222,40)"/><text x="98.7811%" y="143.50"></text></g><g><title>tokio::runtime::park::Inner::park (15 samples, 0.58%)</title><rect x="98.5311%" y="117" width="0.5798%" height="15" fill="rgb(234,217,39)"/><text x="98.7811%" y="127.50"></text></g><g><title>tokio::runtime::park::Inner::park_condvar (15 samples, 0.58%)</title><rect x="98.5311%" y="101" width="0.5798%" height="15" fill="rgb(207,178,40)"/><text x="98.7811%" y="111.50"></text></g><g><title>std::sync::condvar::Condvar::wait (15 samples, 0.58%)</title><rect x="98.5311%" y="85" width="0.5798%" height="15" fill="rgb(221,136,13)"/><text x="98.7811%" y="95.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (15 samples, 0.58%)</title><rect x="98.5311%" y="69" width="0.5798%" height="15" fill="rgb(249,199,10)"/><text x="98.7811%" y="79.50"></text></g><g><title>std::sys::unix::condvar::Condvar::wait (15 samples, 0.58%)</title><rect x="98.5311%" y="53" width="0.5798%" height="15" fill="rgb(249,222,13)"/><text x="98.7811%" y="63.50"></text></g><g><title>__pthread_cond_wait (15 samples, 0.58%)</title><rect x="98.5311%" y="37" width="0.5798%" height="15" fill="rgb(244,185,38)"/><text x="98.7811%" y="47.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (16 samples, 0.62%)</title><rect x="98.5311%" y="165" width="0.6185%" height="15" fill="rgb(236,202,9)"/><text x="98.7811%" y="175.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::_{{closure}} (21 samples, 0.81%)</title><rect x="98.5311%" y="245" width="0.8118%" height="15" fill="rgb(250,229,37)"/><text x="98.7811%" y="255.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (21 samples, 0.81%)</title><rect x="98.5311%" y="229" width="0.8118%" height="15" fill="rgb(206,174,23)"/><text x="98.7811%" y="239.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (21 samples, 0.81%)</title><rect x="98.5311%" y="213" width="0.8118%" height="15" fill="rgb(211,33,43)"/><text x="98.7811%" y="223.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::_{{closure}} (21 samples, 0.81%)</title><rect x="98.5311%" y="197" width="0.8118%" height="15" fill="rgb(245,58,50)"/><text x="98.7811%" y="207.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (21 samples, 0.81%)</title><rect x="98.5311%" y="181" width="0.8118%" height="15" fill="rgb(244,68,36)"/><text x="98.7811%" y="191.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::shutdown (4 samples, 0.15%)</title><rect x="99.1882%" y="165" width="0.1546%" height="15" fill="rgb(232,229,15)"/><text x="99.4382%" y="175.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (4 samples, 0.15%)</title><rect x="99.1882%" y="149" width="0.1546%" height="15" fill="rgb(254,30,23)"/><text x="99.4382%" y="159.50"></text></g><g><title>std::sys_common::mutex::Mutex::raw_lock (4 samples, 0.15%)</title><rect x="99.1882%" y="133" width="0.1546%" height="15" fill="rgb(235,160,14)"/><text x="99.4382%" y="143.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (4 samples, 0.15%)</title><rect x="99.1882%" y="117" width="0.1546%" height="15" fill="rgb(212,155,44)"/><text x="99.4382%" y="127.50"></text></g><g><title>__GI___pthread_mutex_lock (4 samples, 0.15%)</title><rect x="99.1882%" y="101" width="0.1546%" height="15" fill="rgb(226,2,50)"/><text x="99.4382%" y="111.50"></text></g><g><title>__lll_lock_wait (4 samples, 0.15%)</title><rect x="99.1882%" y="85" width="0.1546%" height="15" fill="rgb(234,177,6)"/><text x="99.4382%" y="95.50"></text></g><g><title>std::panic::catch_unwind (85 samples, 3.29%)</title><rect x="96.2118%" y="629" width="3.2857%" height="15" fill="rgb(217,24,9)"/><text x="96.4618%" y="639.50">std..</text></g><g><title>std::panicking::try (85 samples, 3.29%)</title><rect x="96.2118%" y="613" width="3.2857%" height="15" fill="rgb(220,13,46)"/><text x="96.4618%" y="623.50">std..</text></g><g><title>std::panicking::try::do_call (85 samples, 3.29%)</title><rect x="96.2118%" y="597" width="3.2857%" height="15" fill="rgb(239,221,27)"/><text x="96.4618%" y="607.50">std..</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (85 samples, 3.29%)</title><rect x="96.2118%" y="581" width="3.2857%" height="15" fill="rgb(222,198,25)"/><text x="96.4618%" y="591.50">&lt;st..</text></g><g><title>std::thread::Builder::spawn_unchecked::_{{closure}}::_{{closure}} (85 samples, 3.29%)</title><rect x="96.2118%" y="565" width="3.2857%" height="15" fill="rgb(211,99,13)"/><text x="96.4618%" y="575.50">std..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (85 samples, 3.29%)</title><rect x="96.2118%" y="549" width="3.2857%" height="15" fill="rgb(232,111,31)"/><text x="96.4618%" y="559.50">std..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::_{{closure}} (52 samples, 2.01%)</title><rect x="97.4874%" y="533" width="2.0101%" height="15" fill="rgb(245,82,37)"/><text x="97.7374%" y="543.50">t..</text></g><g><title>tokio::runtime::handle::Handle::enter (52 samples, 2.01%)</title><rect x="97.4874%" y="517" width="2.0101%" height="15" fill="rgb(227,149,46)"/><text x="97.7374%" y="527.50">t..</text></g><g><title>tokio::runtime::context::enter (52 samples, 2.01%)</title><rect x="97.4874%" y="501" width="2.0101%" height="15" fill="rgb(218,36,50)"/><text x="97.7374%" y="511.50">t..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::_{{closure}}::_{{closure}} (51 samples, 1.97%)</title><rect x="97.5261%" y="485" width="1.9714%" height="15" fill="rgb(226,80,48)"/><text x="97.7761%" y="495.50">t..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (51 samples, 1.97%)</title><rect x="97.5261%" y="469" width="1.9714%" height="15" fill="rgb(238,224,15)"/><text x="97.7761%" y="479.50">t..</text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (26 samples, 1.01%)</title><rect x="98.4925%" y="453" width="1.0050%" height="15" fill="rgb(241,136,10)"/><text x="98.7425%" y="463.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (26 samples, 1.01%)</title><rect x="98.4925%" y="437" width="1.0050%" height="15" fill="rgb(208,32,45)"/><text x="98.7425%" y="447.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (26 samples, 1.01%)</title><rect x="98.4925%" y="421" width="1.0050%" height="15" fill="rgb(207,135,9)"/><text x="98.7425%" y="431.50"></text></g><g><title>std::panic::catch_unwind (26 samples, 1.01%)</title><rect x="98.4925%" y="405" width="1.0050%" height="15" fill="rgb(206,86,44)"/><text x="98.7425%" y="415.50"></text></g><g><title>std::panicking::try (26 samples, 1.01%)</title><rect x="98.4925%" y="389" width="1.0050%" height="15" fill="rgb(245,177,15)"/><text x="98.7425%" y="399.50"></text></g><g><title>std::panicking::try::do_call (26 samples, 1.01%)</title><rect x="98.4925%" y="373" width="1.0050%" height="15" fill="rgb(206,64,50)"/><text x="98.7425%" y="383.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (26 samples, 1.01%)</title><rect x="98.4925%" y="357" width="1.0050%" height="15" fill="rgb(234,36,40)"/><text x="98.7425%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once (26 samples, 1.01%)</title><rect x="98.4925%" y="341" width="1.0050%" height="15" fill="rgb(213,64,8)"/><text x="98.7425%" y="351.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll::_{{closure}} (26 samples, 1.01%)</title><rect x="98.4925%" y="325" width="1.0050%" height="15" fill="rgb(210,75,36)"/><text x="98.7425%" y="335.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (26 samples, 1.01%)</title><rect x="98.4925%" y="309" width="1.0050%" height="15" fill="rgb(229,88,21)"/><text x="98.7425%" y="319.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (26 samples, 1.01%)</title><rect x="98.4925%" y="293" width="1.0050%" height="15" fill="rgb(252,204,47)"/><text x="98.7425%" y="303.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (26 samples, 1.01%)</title><rect x="98.4925%" y="277" width="1.0050%" height="15" fill="rgb(208,77,27)"/><text x="98.7425%" y="287.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (26 samples, 1.01%)</title><rect x="98.4925%" y="261" width="1.0050%" height="15" fill="rgb(221,76,26)"/><text x="98.7425%" y="271.50"></text></g><g><title>tokio::runtime::thread_pool::worker::block_in_place::_{{closure}}::_{{closure}} (4 samples, 0.15%)</title><rect x="99.3429%" y="245" width="0.1546%" height="15" fill="rgb(225,139,18)"/><text x="99.5929%" y="255.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (4 samples, 0.15%)</title><rect x="99.3429%" y="229" width="0.1546%" height="15" fill="rgb(230,137,11)"/><text x="99.5929%" y="239.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (4 samples, 0.15%)</title><rect x="99.3429%" y="213" width="0.1546%" height="15" fill="rgb(212,28,1)"/><text x="99.5929%" y="223.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run::_{{closure}} (4 samples, 0.15%)</title><rect x="99.3429%" y="197" width="0.1546%" height="15" fill="rgb(248,164,17)"/><text x="99.5929%" y="207.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (4 samples, 0.15%)</title><rect x="99.3429%" y="181" width="0.1546%" height="15" fill="rgb(222,171,42)"/><text x="99.5929%" y="191.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (4 samples, 0.15%)</title><rect x="99.3429%" y="165" width="0.1546%" height="15" fill="rgb(243,84,45)"/><text x="99.5929%" y="175.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (4 samples, 0.15%)</title><rect x="99.3429%" y="149" width="0.1546%" height="15" fill="rgb(252,49,23)"/><text x="99.5929%" y="159.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (4 samples, 0.15%)</title><rect x="99.3429%" y="133" width="0.1546%" height="15" fill="rgb(215,19,7)"/><text x="99.5929%" y="143.50"></text></g><g><title>tokio::runtime::park::Inner::park (4 samples, 0.15%)</title><rect x="99.3429%" y="117" width="0.1546%" height="15" fill="rgb(238,81,41)"/><text x="99.5929%" y="127.50"></text></g><g><title>tokio::runtime::park::Inner::park_condvar (4 samples, 0.15%)</title><rect x="99.3429%" y="101" width="0.1546%" height="15" fill="rgb(210,199,37)"/><text x="99.5929%" y="111.50"></text></g><g><title>std::sync::condvar::Condvar::wait (4 samples, 0.15%)</title><rect x="99.3429%" y="85" width="0.1546%" height="15" fill="rgb(244,192,49)"/><text x="99.5929%" y="95.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (4 samples, 0.15%)</title><rect x="99.3429%" y="69" width="0.1546%" height="15" fill="rgb(226,211,11)"/><text x="99.5929%" y="79.50"></text></g><g><title>std::sys::unix::condvar::Condvar::wait (4 samples, 0.15%)</title><rect x="99.3429%" y="53" width="0.1546%" height="15" fill="rgb(236,162,54)"/><text x="99.5929%" y="63.50"></text></g><g><title>__pthread_cond_wait (4 samples, 0.15%)</title><rect x="99.3429%" y="37" width="0.1546%" height="15" fill="rgb(220,229,9)"/><text x="99.5929%" y="47.50"></text></g><g><title>__GI___clone (141 samples, 5.45%)</title><rect x="94.3564%" y="741" width="5.4503%" height="15" fill="rgb(250,87,22)"/><text x="94.6064%" y="751.50">__GI___..</text></g><g><title>start_thread (94 samples, 3.63%)</title><rect x="96.1732%" y="725" width="3.6336%" height="15" fill="rgb(239,43,17)"/><text x="96.4232%" y="735.50">star..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (93 samples, 3.59%)</title><rect x="96.2118%" y="709" width="3.5949%" height="15" fill="rgb(231,177,25)"/><text x="96.4618%" y="719.50">std:..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (93 samples, 3.59%)</title><rect x="96.2118%" y="693" width="3.5949%" height="15" fill="rgb(219,179,1)"/><text x="96.4618%" y="703.50">&lt;all..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (93 samples, 3.59%)</title><rect x="96.2118%" y="677" width="3.5949%" height="15" fill="rgb(238,219,53)"/><text x="96.4618%" y="687.50">&lt;all..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (93 samples, 3.59%)</title><rect x="96.2118%" y="661" width="3.5949%" height="15" fill="rgb(232,167,36)"/><text x="96.4618%" y="671.50">core..</text></g><g><title>std::thread::Builder::spawn_unchecked::_{{closure}} (93 samples, 3.59%)</title><rect x="96.2118%" y="645" width="3.5949%" height="15" fill="rgb(244,19,51)"/><text x="96.4618%" y="655.50">std:..</text></g><g><title>std::sys::unix::thread::guard::current (8 samples, 0.31%)</title><rect x="99.4975%" y="629" width="0.3092%" height="15" fill="rgb(224,6,22)"/><text x="99.7475%" y="639.50"></text></g><g><title>pthread_getattr_np (8 samples, 0.31%)</title><rect x="99.4975%" y="613" width="0.3092%" height="15" fill="rgb(224,145,5)"/><text x="99.7475%" y="623.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.31%)</title><rect x="99.4975%" y="597" width="0.3092%" height="15" fill="rgb(234,130,49)"/><text x="99.7475%" y="607.50"></text></g><g><title>tcache_init.part.4 (8 samples, 0.31%)</title><rect x="99.4975%" y="581" width="0.3092%" height="15" fill="rgb(254,6,2)"/><text x="99.7475%" y="591.50"></text></g><g><title>arena_get2.part.2 (8 samples, 0.31%)</title><rect x="99.4975%" y="565" width="0.3092%" height="15" fill="rgb(208,96,46)"/><text x="99.7475%" y="575.50"></text></g><g><title>new_heap (8 samples, 0.31%)</title><rect x="99.4975%" y="549" width="0.3092%" height="15" fill="rgb(239,3,39)"/><text x="99.7475%" y="559.50"></text></g><g><title>__GI___mprotect (8 samples, 0.31%)</title><rect x="99.4975%" y="533" width="0.3092%" height="15" fill="rgb(233,210,1)"/><text x="99.7475%" y="543.50"></text></g><g><title>tokio-runtime-w (410 samples, 15.85%)</title><rect x="84.1129%" y="757" width="15.8485%" height="15" fill="rgb(244,137,37)"/><text x="84.3629%" y="767.50">tokio-runtime-w</text></g><g><title>all (2,587 samples, 100%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(240,136,2)"/><text x="0.2500%" y="783.50"></text></g></svg></svg>